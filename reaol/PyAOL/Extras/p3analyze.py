#!/usr/bin/python
# Reanalyzing p3analyzer
# There's a LOT of X here.
# It's still not as much as
# your mom tried giving me
# last weekend.
# - phantasm
import sys
import re
import binascii
import crcmod

# Input packet from argv
# packet = " ".join(sys.argv[1:])
packet = "5ab10a02eb101020415400110001000d040002320101001303200128010901010c010500000000000c000500000000a1011d000109013501000101102401011003010010040100100c0320001e1008015b10400105103a0320001e01000108190000101702371c100b010110270100010200011100010a01010114263c68313e57656c636f6d6520746f2052652d414f4c205b414c504841204f4e455d3c2f68313e01146f3c623e446973636c61696d65723c2f623e3a20576520617265206e6f742073656c6c696e6720616363657373206f722073656c6c696e6720612070726f647563743b20627574207261746865722075736572732061726520706c656467696e6720746f20737570706f72742074686501145f2070726f6a65637420616e6420696e2065786368616e676520776527726520726577617264696e67207468656d206279206c657474696e67207468656d207472792052452d414f4c20696e206561726c7920616c706861206163636573732e01142e3c62723e3c62723e596f752068617665206c6f6767656420696e2061732061204775657374213c62723e3c62723e01142a3c623e52652d414f4c3c2f623e20697320616e20414f4cae2073657276657220656d756c61746f72202d01145320776869636820747269657320746f2070726f7669646520616e20657870657269656e636520746861742077617320617661696c61626c6520647572696e6720746865203139393073272e3c62723e3c62723e011457417320612047756573742c20796f757220657870657269656e63652077696c6c206265206c696d6974656420746f206368617420726f6f6d7320616e64206d65737361676520626f617264732c20686f77657665722c2001145d796f752077696c6c206e6f7420626520616c6c6f77656420746f20706f7374206d6573736167657320746f2074686520626f617264732e2042757420796f752063616e20667265656c79206368617420696e20726f6f6d73213c62723e011d000111000010000002000d"
packet_int = int(packet, 16)
packet_split = ' '.join(packet[i: i+2] for i in range(0, len(packet), 2))
packet_byte_list = packet_split.split()

packet_header = packet[:16]
packet_header_split = ' '.join(packet_header[i: i+2] for i in range(0, len(packet_header), 2))
packet_token = packet_header_split[-2:]
token_data = packet[16:-2]
token_data_split = ' '.join(token_data[i: i+2] for i in range(0, len(token_data), 2))

sync_byte = packet_byte_list[0]
raw_sync_byte = binascii.unhexlify(sync_byte)

crchi_byte = packet_byte_list[2]
raw_crchi_byte = binascii.unhexlify(crchi_byte)
null_byte = packet_byte_list[3]
raw_null_byte = binascii.unhexlify(null_byte)
end_byte = packet[-2:]

def print_script_header():
    print("X"*40)
    print("AOL P3 Packet Analyzer")

def print_entire_packet():
    print("Entire packet        :       ")
    print(packet_split)

def print_packet_header():
    print("Packet Header        :     ")
    print(packet_header_split)

def validate_sync_packet():
    print("Do we see the Z?")
    if packet_header_split[:2] == '5a':
        print("SYNC Byte Found      :             ", sync_byte)
        print("Raw SYNC Byte        :             ", raw_sync_byte)
    else:
        print("SYNC Packet NOT Found. Malformed Packet")

def find_crc_hilo_byte():
    crclo_byte = packet_byte_list[1]
    crchi_byte = packet_byte_list[2]
    raw_crclo_byte = binascii.unhexlify(crclo_byte)
    print("Locating CRC Bytes...")
    print("CRCLO Byte           :               ", crclo_byte)
    print("CRCHI Byte:          :               ", crchi_byte)
    return crclo_byte, crchi_byte

def find_length_byte():
    length_null_byte = packet_byte_list[3]
    length_byte = packet_byte_list[4]
    print("Checking Length Bytes...")
    if length_null_byte == '00':
        print("Null Length Byte Found:            ", length_null_byte)
        print("Length Byte Found     :            ", length_byte)
    else:
        print("Using 2 Byte Length...")
        print("Length Byte Found    :            ", length_null_byte, length_byte)
        return
def print_packet_token():
    print("Packet Token         :")
    if packet_token == 'a3':
        print("INIT Packet Token Found:           ", packet_token)
        print("X"*40)
    elif packet_token == '20':
        print("RX Data Token Found  :               ", packet_token)
    else: 
        print("X"*40)
        print("Unrecognized Packet Token Found:")
        print(packet_token)

def get_token_data():
    print("Token Data           :")
    print(token_data_split)
    print("X"*40)
    print("Searching for END Byte...")
    if end_byte == "0d":
        print("END Byte Found   :                 ", end_byte)
    else:
        print("Malformed packet, END Byte NOT found")

print("Token Data:")
print(token_data_split)
print("X"*40)
print("Searching for END Byte")
if end_byte == "0d":
    print("END Byte Found:                    ", end_byte)
    print("X"*40)
else:
    print("Malformed packet, END Byte NOT found")
print_script_header()
print("X"*40)
print_entire_packet()
print("X"*40)
print_packet_header()
print("X"*40)
validate_sync_packet()
print("X"*40)
find_crc_hilo_byte()
print("X"*40)
find_length_byte()
print("X"*40)
print_packet_token()
print("X"*40)
get_token_data()
print("X"*40)