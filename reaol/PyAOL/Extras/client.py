#!/usr/bin/python3
# PyAOL Client 
# Sends INIT data to server
# Server responds
# Sends Auth as Guest
# Server responds with Welcome Screen
# Sends SignOff pE packet
# Listens for ACK from Server
# ~phantasm
import codecs
import socket
import sys
import textwrap
import binascii

# Debug through nc -l 5191
# HOST, PORT = "localhost", 5190
# HOST, PORT = "10.224.235.21", 5190
HOST, PORT = "americaonline.reaol.org", 5190
'''
# If you play through INIT, ACK, LOGIN and SC
# DO NOT FORGET to play the pE - Sign Off Packet
# Be kind and don't leave ghosts. -phantasm
'''
# INIT Packet :  client 2 server - Starts Session with Server
init_packet = "5aa3bc00347f7fa3036e5f0010000000050f00001c980b3a1db110400303000000000601000001000ec008ffff0000000000000000000000020d\r"
# ACK  Packet :  s2c - Acknowledge INIT Request
# ack_packet = "5ab71100037f7f240d\r"
ack_packet = "5ab71100037f7f240d\r"
# LOGIN Packet:  c2s - Login as Guest
# Dd Token   :  s2c - Welcome Screen
#login_packet = "5a2a2a003c107fa044640016000100010a0400000001010b040000000203010a47756573742020202020011d00011d00010a040000000203010120011d000002000d\r"
login_packet = "5af102003c107fa044640016000100010a0400000001010b040000000203010a47756573742020202020011d00011d00010a040000000203010120011d000002000d\r"
# AT Token    :  s2c - Welcome Screen Content
# packet = "5ab10a02eb101020415400110001000d040002320101001303200128010901010c010500000000000c000500000000a1011d000109013501000101102401011003010010040100100c0320001e1008015b10400105103a0320001e01000108190000101702371c100b010110270100010200011100010a01010114263c68313e57656c636f6d6520746f2052652d414f4c205b414c504841204f4e455d3c2f68313e01146f3c623e446973636c61696d65723c2f623e3a20576520617265206e6f742073656c6c696e6720616363657373206f722073656c6c696e6720612070726f647563743b20627574207261746865722075736572732061726520706c656467696e6720746f20737570706f72742074686501145f2070726f6a65637420616e6420696e2065786368616e676520776527726520726577617264696e67207468656d206279206c657474696e67207468656d207472792052452d414f4c20696e206561726c7920616c706861206163636573732e01142e3c62723e3c62723e596f752068617665206c6f6767656420696e2061732061204775657374213c62723e3c62723e01142a3c623e52652d414f4c3c2f623e20697320616e20414f4cae2073657276657220656d756c61746f72202d01145320776869636820747269657320746f2070726f7669646520616e20657870657269656e636520746861742077617320617661696c61626c6520647572696e6720746865203139393073272e3c62723e3c62723e011457417320612047756573742c20796f757220657870657269656e63652077696c6c206265206c696d6974656420746f206368617420726f6f6d7320616e64206d65737361676520626f617264732c20686f77657665722c2001145d796f752077696c6c206e6f7420626520616c6c6f77656420746f20706f7374206d6573736167657320746f2074686520626f617264732e2042757420796f752063616e20667265656c79206368617420696e20726f6f6d73213c62723e011d000111000010000002000d"
# SC Token    :  c2s - Sign-on Client
SC_token_packet = "5a359e00141112a053430014000100030104000000000002000d\r"
# AT Token    :  s2c - "Welcome,"
# packet = "5a026f003d131120415400150001000d1a0001090320001e10180957656c636f6d652c200d1d000c0701010c46000c090101000a020114011401210c0601010111000d"
# CJ Token    :  c2s - Go to Chat?
#cj_token_packet = "5ac01d00141214a0434a001b000100010704000000020002000d"
CJ_token_packet = "5a223300141214a0434a0035000100010704000000070002000d\r"
# AT Token    :  s2c   No idea
# packet = "5a657d003f151220415400170001000116032000620f1302010201350001110000070101001403200062010903200062010a0101010400011100011d00000701020012000d"
# AT Token    :  s2c - Chat Room List
# packet = "5a5c0b00a6161220415400180001000109032000620f13020102010a01010100080631097a65726177100b0101010200010008063109776172657a100b010201020001001306310974686572613334277320636f726e6572100b010301020001000b063109736f6e6963206364100b01040102000100080630097068697368100b010501020001000a0631096d616363686174100b0106010200011100011d0000070101000701020012000d"
# AT Token    :  s2c - Chat Room List Cont.
# packet = "5a962b0098171220415400190001000109032000620f13020102010a0101010006063109697861100b010701020001000706300969726978100b010801020001000806300968656c6c6f100b010901020001000a06300964656164656e64100b010a010200010009063109636572766572100b010b01020001000a06370957656c636f6d65100b010d010200011100011d0000070101000701020012000d"
# AT Token    :  s2c - Chat Room List Cont.
# packet = "5a538e00a21812204154001a0001000109032000620f13020102010a010101000706310957656c63100b010e01020001000a063109576166666c6573100b010f01020001000706310957616666100b0110010200010006063109546f78100b011101020001001006300954686520382d62697420477579100b011201020001000e06300954656368204c696e6b6564100b0113010200011100011d0000070101000701020012000d"
# AT Token    :  s2c - Chat Room List Cont.
# packet = "5a43ab00b11912204154001b0001000109032000620f13020102010a01010100050631095456100b011401020001001306310950726574656e64204974277320393073100b01150102000100110630094e6f7374616c676961204e657264100b01160102000100070630094e657773100b011701020001000c0631094e657665726c616e64100b011801020001000f0630094e6574776f726b436875636b100b0119010200011100011d0000070101000701020012000d"
# cQ Token    :  c2s - Join Chat Welcome
# packet = "5ac2e9001e131ea06351001f0001000107040000000303010757656c636f6d650002000d"
# AT Token    :  s2c - Chat Room List and Name
# packet = "5a28d201e61f132041540021000100011b0103011604130000020f13010101090413000002010c010002010102011d00000701010014032001200109041300000201150757656c636f6d65010a01000200010202031f000100040f019f040700040602724404010757656c636f6d65040800000200011d000c010500000000010c000500000100010111000b00000b01057265616f6c100b01010b0200011d000b01054a61736f6e100b01010b0200011d000b0103783072100b01010b0200011d000b01035a6970100b01010b0200011d000b0106536c61707455100b01010b0200011d000b010456616e65100b01010b0200011d000b01045452532d100b01010b0200011d000b010456616e65100b01010b0200011d000b010456616e65100b01010b0200011d000b010456616e65100b01010b0200011d000b0108477565737444454a100b01010b0200011d000b010847756573744b5931100b01010b0200011d000b0103617034100b01010b0200011d000b010650307374616c100b01010b0200011d000b0103696c6c100b01010b0200011d000b01055461696c73100b01010b0200011d000b01084775657374365430100b01010b0200011d000b01084775657374364435100b01010b0200011d00010a010002010182011d00011100011804000001020012000d"
# CA Token    :  s2c - Receive User Chat
# packet = "5a9f7c000c201320434120546f6d6d79440d"
# CB Token    :  s2c - Chat User Name?
# packet = "5a96dd000e21132043422047756573743654300d"
# Aa Token    :  c2s - No idea (Send Chat?)
# packet = "5a259f001f1421a04161002600010001070400000004010a04000001020301012e0002000d"
# AB Token    :  s2c - Chat Receive User Name Text "."
# packet = "5aaa040011221420414247756573743644350000002e0d"
# AB Token    :  s2c - Chat Receive User Name Text "Welcome"
# packet = "5a1fe800172314204142696c6c000000000000000077656c636f6d650d"
# CA Token    :  s2c - Chat Receive User Name
# packet = "5a68c8000a24142043412044616c650d"
# CB Token    :  s2c - Chat User Name?
# packet = "5a9e99000a25142043422044616c650d"
# CA Token    :  s2c - Chat Receive User Name
# packet = "5a9a09000b2614204341205461696c730d"
# AB Token    :  s2c - Chat Receive User Name Text "heloo"
# packet = "5ac648001527142041425461696c7300000000000068656c6f6f0d"
# iS Token    : c2s  - Send IM to user (phantasm : user doesn't exist) 
iS_token_packet = "5af832003b141ca06953004b0001000107040000000d010a04000000010301087068616e7461736d011d00010a0400000002030105526f636b21011d000002000d\r"
# id Token    :  c2s - Look up user (phantasm : user doesn't exist) profile
id_token_packet = "5a93fa0026151ea06964004e0001000107040000000f010a04000000010301087068616e7461736d0002000d\r"
# pE Token    :  c2s - Sign Off Client
#signoff_packet = "5a2a2a00181111a0704500ce00010001070400000006000e01140002000d\r"
#signoff_packet = "5a07f200181315a07045001c00010001070400000005000e01140002000d\r"
signoff_packet = "5a60290018157da0704500ce00010001070400000006000e01140002000d\r"

def to_hex(data):
    results = bytes.fromhex(data)
    return results

def receive_packet(sock):
    data = sock.recv(16202)
    return data

def send_packet(sock, data):
    data = to_hex(data)
    results = sock.sendall(data)
    return results

def send_login(sock):
    send_packet(login_packet)
    login_response = receive_packet(sock)
    return login_response

#def send_chat(sock):
#    send_packet(chat_packet)
#    chat_response = receive_packet(sock)
#    print(chat_response)

def sign_off(sock):
    send_packet(signoff_packet)
    signoff_response = receive_packet(sock)
    return signoff_response

def send_socket(sock, packet):
    analyze_packet(to_hex(packet))
    send_packet(sock, packet)
    response = receive_packet(sock)
    #print(packet)
    print("*"*80)    
    response_str = str(response)
    print(textwrap.fill(response_str, 32))
    analyze_packet(response)
    print("*"*80)
    return sock

# Retrieve packet_header [first 8 bytes of the packet]
# sync [:2]
# crc [2:6]
# length [6:10]
# tx_seq [10:12]
# rx_seq [12:14]
# data_type [14:16]
# Next is the fancy FDO stuffs we want to try to peek at
# data [16:-2]
# This should help calculate CRC
# total_bytes = len((packet - 4))
# stop [-2:]
def get_packet_header(packet):
    packet_header = packet[:16]
    print(packet_header)
    #print("sync byte", packet_header[:2])
    #print("crc bytes", packet_header[2:6])
    #print(packet_header[6:10])
    return packet_header

def get_token_data(packet):
    token_data = packet[16:-2]
    return token_data

def show_packet_type(packet_header):
    packet_type = packet_header[-2:]
    print(packet_type)
    print("Checking Packet Type...")
    if packet_type == 'a3':
        print("INIT Packet Type Found              :", packet_type)
        print("*"*80)
    elif packet_type == '24':
        print("ACK Packet Type Found               :", packet_type)
        print("*"*80)
    elif packet_type == '20':
        print("RX Data Type Found                  :", packet_type)
        print("*"*80)
    elif packet_type == 'a0':
        print("TX Data Type Found                  :", packet_type)
        print("*"*80)
    elif packet_type == 'pE':
        print("Client Disconnect Type Found        :", packet_type)
        print("*"*80)
    else: 
        print("*"*80)
        print("Unrecognized Packet Type Found      :", packet_type)
    
def check_sync_byte(packet_header):
    sync_byte = packet_header[:2]
    if sync_byte == '5a':
        print("SYNC Byte Found")
    else:
        print("Missing SYNC Byte from Packet")

def analyze_packet(packet):
    print("*"*80)
    print("Analyzing Some Packet Data:")
    decoded_packet = binascii.hexlify(packet).decode()
    [decoded_packet[i:i+2] for i in range(0, len(decoded_packet), 2)]
    packet_header = get_packet_header(decoded_packet)
    check_sync_byte(packet_header)
    token_data = get_token_data(decoded_packet)
    show_packet_type(packet_header)
    #print(textwrap.fill(token_data, 32))
    if packet_header[-2:] == "a3":
        print("No Token with INIT Packet")
    elif packet_header[-2:] == "24":
        print("No Token with ACK Packet")
    else:
        decode_token_data(packet)

def decode_token_data(packet):
    token_data = str(packet[8:-2])
    print(token_data)
    token_data_split = ' '.join(token_data[i: i+2] for i in range(0, len(token_data), 2))
    if token_data_split:
        print("*"*80)
        token_type = token_data[2:4]
        if token_type == 'AT':
            print("AT Data Token Found                 :", token_type)
            print("*"*80)
        elif token_type == '$':
            print("ACK Token Found                     :", token_type)
            print("*"*80)
        elif token_type == 'Dd':
            print("LOGIN Token Found                   :", token_type)
        elif token_type == 'SC':
            print("Signon Client Token Found           :", token_type)
        elif token_type == 'pE':
            print("Client Sign Off Token Found         :", token_type)
        elif token_type == 'CJ':
            print("Chat Join Token Found               :", token_type)
        else:
            print("Unrecognized Token Type             :", token_type)
            print("*"*80)
    else:
        print("Token Data Empty.")
        print("*"*80)
    
def main():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect((HOST, PORT))
        print("*"*80)
        print("Sending INIT Packet :                                   screeeeeeeeeeeeeeeech **")
        print("Receiving ACK Packet:                                 beeeeeeep beeeeep beeep **")
        send_socket(sock, init_packet)
        print("Sending LOGIN Packet:                                        chirp chirp dong **")
        print("Receiving ACK Packet:                             screeeeech skerrrrrrrr ding **")
        send_socket(sock, login_packet)
        print("Sending SC Packet   :                                 ding ding screeeeeeeech **")
        print("Receiving ACK Packet:                                     Welcome to re-AOL   **")
        send_socket(sock, SC_token_packet)
        print("Sending CJ Packet   :                                       You Got Mail!     **")
        print("Receiving ACK Packet:             Not really! It's just a quick Guest session **")
        send_socket(sock, CJ_token_packet)
        print("Sending SIGNOFF Packet:                                       Signing Off     **")
        print("Receiving ACK Packet  :                   click...             Good Bye!      **")
        send_socket(sock, signoff_packet)

main()