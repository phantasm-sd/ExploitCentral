#!/usr/bin/python3
import notaol.p3.client
import binascii
import notaol.fdo.stream as fs
import Extras.client_lib as cl
import logging
import time
from bs4 import BeautifulSoup


# Enabling logging.DEBUG will show inbound/outbound packet data
# Setting logging.INFO will show Token detection
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(message)s')

def process_response(response):
    hex_response = binascii.hexlify(response)
    str_response = hex_response.decode("utf-8")
    HEADER = str_response[:14]
    SYNC = HEADER[:2]
    CRC = HEADER[2:6]
    END = str_response[-2:]
    HEXLENGTH = HEADER[6:10]
    LENGTH = int(HEXLENGTH, 16)
    TX_SEQ = HEADER[10:12]
    RX_SEQ = HEADER[12:14]
    DATA = str_response[10:((LENGTH * 2) + 10)]
    STREAM = DATA[4:]
    TYPE = STREAM[:2]
    if TYPE == "24":
        return
    if TYPE == "20":
        raw_atom_stream = cl.to_hex(STREAM[6:])
        parsed_atom_stream = parse_atom_stream(raw_atom_stream)
        
    check_next_frame = str_response[10:((LENGTH * 2) + 14)]
    if check_next_frame[-2:] == "5a":
        remaining_frames = str_response[(len(DATA) + 12):]
        process_response(cl.to_hex(remaining_frames))

def get_response():
    #print("Listening for response.")
    response = sock.recv(8192)
    #print("Response", response)
    process_response(response)

def connect_chatter():
    print("Beep beeeeeep")
    print("Beeeeeeeeeeep")
    time.sleep(5)
    print("beep beep beep SCREEEEEECH")
    print("Buzz-ding ding beeeeeeeep")
    time.sleep(2)
    print("screeeeeeeeeeeeeeech beep")
    print("krrrrrrrrrrrrrrrrrrrrrr")
    time.sleep(2)
    print("Bong Bong")
    print("skrrrrrrrrrrrrrrrr")
    time.sleep(2)

def signon():
    global sock
    sock = cl.connect()
    print("Connecting to re-AOL...")
    sock.send(cl.to_hex(cl.init_packet))
    get_response()
    connect_chatter()
    print("Logging in...")
    sock.send(cl.to_hex(cl.login_packet))
    get_response()

def parse_atom_stream(raw_atom_stream):
    global parsed_atom_stream
    atom_stream = fs.AtomStream()
    atom_stream.parse(raw_atom_stream)
    atoms_list = list(atom_stream.atoms)
    #print(atoms_list)
    stream_id = atom_stream.stream_id
    print("*"*80)
    #print(stream_id)
    display_data(atom_stream.atoms)

def display_data(atoms):
    for atom, value in atoms:
        if 'man_append_data' in str(atom):
            atom_soup = BeautifulSoup(value, features="html.parser")
            print(atom_soup.get_text().strip())
        if 'async_force_off' in str(atom):
            atom_soup = BeautifulSoup(value, features="html.parser")
            print(atom_soup.get_text().strip())
            print("Good-Bye!")
    print("*"*80)

def aoshell():
    i = input("reAOL > ")
    if i == "quit":
        exit()
    elif i == "home":
        home_aoshell()
    elif i == "connect":
        connect()
    elif i == "signon":
        # Connect with 2nd arg as username
        signon()
    elif i == "chat":
        join_chat()
    elif i == "commands":
        print_ascii_banner()
        print(
        '''
        pyAOL Client written for re-AOL

        General Commands:
        
        Connect as a Guest:
        reAOL > signon Guest

        Sign Off:
        reAOL > signoff

        List Chat Rooms:
        reAOL > chat list
        reAOL > chat join RoomName
        reAOL > chat leave

        Back to Home:
        reAOL > home

        Quit PyAOL:
        reAOL > quit
        '''
        )
    elif i == "signoff":
        signoff()
    else:
        for a in range(len(i)):
            print(i[a])
    aoshell() 

def signoff():
    sock.send(cl.to_hex(cl.signoff_packet))
    get_response()

def join_chat():
    sock.send(cl.to_hex(cl.join_welcome))
    print(cl.receive_packet(sock))

def home_aoshell():
    print_ascii_banner()
    aoshell()

def print_ascii_banner():
    print(
    '''
             Welcome to:
    '                             d8888   .d88888b.   888
    '                            d88888d 888P"  "Y88b 888
    '                           d88P8888 888      888 888
    '888d888  .d88b.           d88P 8888 888      888 888
    '888 P " 8P  Y8b          d88P  8888 888      888 888
    '888     88888888 888888 d88P   8888 888      888 888
    '888     Y8b.            d8888888888  Y88b. .d88P 888
    '888      "Y8888        d88P     888   "Y88888P"  88888888
                                            generated by: syg

    For more information please visit:       http://reaol.org
    Discord Chat available at:        http://discord.gg/reaol

    Please enter a command at the prompt to begin.
    For a list of commands enter:     commands
    '''
    )
    
if __name__ == "__main__":
    print_ascii_banner()
    aoshell()
