#!/usr/bin/python
# Reanalyzing p3analyzer
# There's a LOT of X here.
# It's still not as much as
# your mom tried giving me
# last weekend.
# - phantasm
# Who's got our back?
import sys
import re
import enum
import binascii
import crcmod
import struct
import sys
import textwrap
import notaol.fdo.stream as fs

# Input packet from argv
# I have supplied a bunch of packets with some
# resemblence of documentation on what the session
# was doing.
packet = " ".join(sys.argv[1:])

# If you play through INIT, ACK and GUEST
# DO NOT FORGET to play the pE - Sign Off Packet
# Be kind and don't leave ghosts.

# INIT Packet :  client 2 server - Starts Session with Server
# packet = "5aa3bc00347f7fa3036e5f0010000000050f00001c980b3a1db110400303000000000601000001000ec008ffff0000000000000000000000020d"
# ACK  Packet :  s2c - Acknowledge INIT Request
# packet = "5ab71100037f7f240d"
# GUEST Packet:  c2s - Login as Guest
# packet = "5a9bf3003c107fa044640018000100010a0400000001010b040000000203010a47756573742020202020011d00011d00010a040000000203010120011d000002000d"
# Dd Packet   :  s2c - Welcome Screen
# packet = "5ab10a02eb101020415400110001000d040002320101001303200128010901010c010500000000000c000500000000a1011d000109013501000101102401011003010010040100100c0320001e1008015b10400105103a0320001e01000108190000101702371c100b010110270100010200011100010a01010114263c68313e57656c636f6d6520746f2052652d414f4c205b414c504841204f4e455d3c2f68313e01146f3c623e446973636c61696d65723c2f623e3a20576520617265206e6f742073656c6c696e6720616363657373206f722073656c6c696e6720612070726f647563743b20627574207261746865722075736572732061726520706c656467696e6720746f20737570706f72742074686501145f2070726f6a65637420616e6420696e2065786368616e676520776527726520726577617264696e67207468656d206279206c657474696e67207468656d207472792052452d414f4c20696e206561726c7920616c706861206163636573732e01142e3c62723e3c62723e596f752068617665206c6f6767656420696e2061732061204775657374213c62723e3c62723e01142a3c623e52652d414f4c3c2f623e20697320616e20414f4cae2073657276657220656d756c61746f72202d01145320776869636820747269657320746f2070726f7669646520616e20657870657269656e636520746861742077617320617661696c61626c6520647572696e6720746865203139393073272e3c62723e3c62723e011457417320612047756573742c20796f757220657870657269656e63652077696c6c206265206c696d6974656420746f206368617420726f6f6d7320616e64206d65737361676520626f617264732c20686f77657665722c2001145d796f752077696c6c206e6f7420626520616c6c6f77656420746f20706f7374206d6573736167657320746f2074686520626f617264732e2042757420796f752063616e20667265656c79206368617420696e20726f6f6d73213c62723e011d000111000010000002000d"
# SC Token    :  c2s - Start Chat
# packet = "5a359e00141112a053430014000100030104000000000002000d"
# AT Token    :  s2c - More Welcome?
# packet = "5a026f003d131120415400150001000d1a0001090320001e10180957656c636f6d652c200d1d000c0701010c46000c090101000a020114011401210c0601010111000d"
# CJ Token    :  c2s
# packet ="5ac01d00141214a0434a001b000100010704000000020002000d"
# AT Token    :  s2c   No idea
# packet = "5a657d003f151220415400170001000116032000620f1302010201350001110000070101001403200062010903200062010a0101010400011100011d00000701020012000d"
# AT Token    :  s2c - Chat Room List
# packet = "5a5c0b00a6161220415400180001000109032000620f13020102010a01010100080631097a65726177100b0101010200010008063109776172657a100b010201020001001306310974686572613334277320636f726e6572100b010301020001000b063109736f6e6963206364100b01040102000100080630097068697368100b010501020001000a0631096d616363686174100b0106010200011100011d0000070101000701020012000d"
# AT Token    :  s2c - Chat Room List Cont.
# packet = "5a962b0098171220415400190001000109032000620f13020102010a0101010006063109697861100b010701020001000706300969726978100b010801020001000806300968656c6c6f100b010901020001000a06300964656164656e64100b010a010200010009063109636572766572100b010b01020001000a06370957656c636f6d65100b010d010200011100011d0000070101000701020012000d"
# AT Token    :  s2c - Chat Room List Cont.
# packet = "5a538e00a21812204154001a0001000109032000620f13020102010a010101000706310957656c63100b010e01020001000a063109576166666c6573100b010f01020001000706310957616666100b0110010200010006063109546f78100b011101020001001006300954686520382d62697420477579100b011201020001000e06300954656368204c696e6b6564100b0113010200011100011d0000070101000701020012000d"
# AT Token    :  s2c - Chat Room List Cont.
# packet = "5a43ab00b11912204154001b0001000109032000620f13020102010a01010100050631095456100b011401020001001306310950726574656e64204974277320393073100b01150102000100110630094e6f7374616c676961204e657264100b01160102000100070630094e657773100b011701020001000c0631094e657665726c616e64100b011801020001000f0630094e6574776f726b436875636b100b0119010200011100011d0000070101000701020012000d"
# cQ Token    :  c2s - Join Chat Welcome
# packet = "5ac2e9001e131ea06351001f0001000107040000000303010757656c636f6d650002000d"
# AT Token    :  s2c - Chat Room List and Name
# packet = "5a28d201e61f132041540021000100011b0103011604130000020f13010101090413000002010c010002010102011d00000701010014032001200109041300000201150757656c636f6d65010a01000200010202031f000100040f019f040700040602724404010757656c636f6d65040800000200011d000c010500000000010c000500000100010111000b00000b01057265616f6c100b01010b0200011d000b01054a61736f6e100b01010b0200011d000b0103783072100b01010b0200011d000b01035a6970100b01010b0200011d000b0106536c61707455100b01010b0200011d000b010456616e65100b01010b0200011d000b01045452532d100b01010b0200011d000b010456616e65100b01010b0200011d000b010456616e65100b01010b0200011d000b010456616e65100b01010b0200011d000b0108477565737444454a100b01010b0200011d000b010847756573744b5931100b01010b0200011d000b0103617034100b01010b0200011d000b010650307374616c100b01010b0200011d000b0103696c6c100b01010b0200011d000b01055461696c73100b01010b0200011d000b01084775657374365430100b01010b0200011d000b01084775657374364435100b01010b0200011d00010a010002010182011d00011100011804000001020012000d"
# CA Token    :  s2c - Receive User Chat
# packet = "5a9f7c000c201320434120546f6d6d79440d"
# CB Token    :  s2c - Chat User Name?
# packet = "5a96dd000e21132043422047756573743654300d"
# Aa Token    :  c2s - No idea (Send Chat?)
# packet = "5a259f001f1421a04161002600010001070400000004010a04000001020301012e0002000d"
# AB Token    :  s2c - Chat Receive User Name Text "."
# packet = "5aaa040011221420414247756573743644350000002e0d"
# AB Token    :  s2c - Chat Receive User Name Text "Welcome"
# packet = "5a1fe800172314204142696c6c000000000000000077656c636f6d650d"
# CA Token    :  s2c - Chat Receive User Name
# packet = "5a68c8000a24142043412044616c650d"
# CB Token    :  s2c - Chat User Name?
# packet = "5a9e99000a25142043422044616c650d"
# CA Token    :  s2c - Chat Receive User Name
# packet = "5a9a09000b2614204341205461696c730d"
# AB Token    :  s2c - Chat Receive User Name Text "heloo"
# packet = "5ac648001527142041425461696c7300000000000068656c6f6f0d"
# pE Token    :  c2s - Sign Off Client
# packet = "5a60290018157da0704500ce00010001070400000006000e01140002000d"

HEADER_FORMAT = '!cHHBBB'
PACKET_START = b'\x5a'
PACKET_END = b'\r'
HEADER_LENGTH = 8
HEADER_SIZE_OFFSET = 3

# TODO Do I need everything in here? Gotta weed through bush at some point.
packet_int = int(packet, 16)
packet_split = ' '.join(packet[i: i+2] for i in range(0, len(packet), 2))
packet_byte_list = packet_split.split()

packet_header = packet[:16]
packet_header_split = ' '.join(packet_header[i: i+2] for i in range(0, len(packet_header), 2))
packet_type = packet_header_split[-2:]
token_data = packet[16:-2]
token_data_split = ' '.join(token_data[i: i+2] for i in range(0, len(token_data), 2))

sync_byte = packet_byte_list[0]
raw_sync_byte = binascii.unhexlify(sync_byte)

crchi_byte = packet_byte_list[2]
raw_crchi_byte = binascii.unhexlify(crchi_byte)
null_byte = packet_byte_list[3]
raw_null_byte = binascii.unhexlify(null_byte)
end_byte = packet[-2:]

str_response = packet
HEADER = str_response[:14]
SYNC = HEADER[:2]
CRC = HEADER[2:6]
END = str_response[-2:]
HEXLENGTH = HEADER[6:10]
LENGTH = int(HEXLENGTH, 16)
TX_SEQ = HEADER[10:12]
RX_SEQ = HEADER[12:14]
DATA = str_response[10:((LENGTH * 2) + 10)]
STREAM = DATA[4:]
TYPE = STREAM[:2]

# TODO Move these definitions outside and let the main flow breathe
def print_script_header():
    print("X"*40)
    print("AOL P3 Packet Analyzer")
    print("Analyzing more streams than")
    print("the nations leading urologist.")
    print("X"*40)

def print_entire_packet():
    print("Entire packet                          :")
    print(textwrap.fill(packet_split, 23))
    print("X"*40)

def print_packet_header():
    print("Packet Header                          :")
    print(packet_header_split)
    print("X"*40)

def validate_sync_packet():
    print("Do we see the Z?")
    if packet_header_split[:2] == '5a':
        print("SYNC Byte Found                   :  ", SYNC)
        print("I Said Gimme The Z!               :", raw_sync_byte)
        print("X"*40)
    else:
        print("X"*40)
        print("SYNC Packet NOT Found. Malformed Packet")
        print("X"*40)

def count_data_bytes():
    data_bytes = packet[6:-2]
    data_bytes_length = len(data_bytes)
    print("data_bytes\r", textwrap.fill(data_bytes,16))
    print("data_bytes_length", data_bytes_length)
          

def find_crc_hilo_byte():
    crclo_byte = packet_byte_list[1]
    crchi_byte = packet_byte_list[2]
    raw_crclo_byte = binascii.unhexlify(crclo_byte)
    int_crclo_byte = int(crclo_byte, 16)
    print("Locating CRC Bytes...")
    #breakpoint()
    print("CRCLO Byte                          :", crclo_byte)
    print("CRCHI Byte                          :", crchi_byte)
    # Someday.... This beast remains elusive.
    #crc_func = crcmod.predefined.mkPredefinedCrcFun('crc-16')
    #crc_func(data_bytes)
    #print("Data Bytes CRC:    ", data_bytes)
    print("X"*40)
    return crclo_byte, crchi_byte

def find_length_byte():
    length_first_byte = HEXLENGTH[:2]
    length_byte = HEXLENGTH[2:4]
    print("Checking Length Bytes...")
    if length_first_byte == '00':
        print("Null Length Byte Found              :", length_first_byte)
        print("Length Byte Found                   :", length_byte)
        print("-"*40)
        print("Decimal Length:                     :", LENGTH)
        print("X"*40)
    else:
        print("Using 2 Byte Length...")
        print("Length Byte Found                :", length_first_byte, length_byte)
        print("-"*40)
        print("Decimal Length                     :", LENGTH)
        print("X"*40)
        return
def get_seq_info():
    print("Checking Sequence Bytes...")
    print("TX Sequence Bytes                   :", TX_SEQ)
    print("RX Sequence Bytes                   :", RX_SEQ)
    print("X"*40)

def show_packet_type():
    print("Checking Packet Type...")
    # Need to replace this with key:value
    if TYPE == 'a3':
        print("INIT Packet Type Found              :", TYPE)
        print("X"*40)
    elif TYPE == '20':
        print("Data Type Found                     :", TYPE)
        print("X"*40)
    elif TYPE == '21':
        print("SS Packet Type Found                :", TYPE)
        print("X"*40)
    elif TYPE == '22':
        print("SSR Packet Type Found               :", TYPE)
        print("X"*40)
    elif TYPE == '23':
        print("INIT2 Packet Type Found             :", TYPE)
        print("X"*40)
    elif TYPE == '24':
        print("ACK Packet Type Found               :", TYPE)
        print("X"*40)
    elif TYPE == '25':
        print("NACK Packet Type Found              :", TYPE)
        print("X"*40)        
    elif TYPE == 'a0':
        print("Client Data Type Found              :", TYPE)
        print("X"*40)
    else: 
        print("X"*40)
        print("Unrecognized Packet Type Found      :", TYPE)

def show_token_data():
    if token_data_split:
        print("Token Data                             :")
        print(textwrap.fill(token_data_split, 23))
        print("X"*40)
    else:
        print("Token Data Empty.")
        print("X"*40)

def decode_token_data():
    if token_data_split:
        print("Decoding Token Data...")
        token_hex = bytes.fromhex(token_data_split)
        print("Decoded Token Data                     :")
        # print("X"*40)
        token_type = token_data[:4]
        if packet_type == '20':
            skip_type = [ '4141', '4142', '4143', '4144', '4341', '4342', '4444',
                          '4433', '4436', '4470', '4f5f', '5853', '6470', '6549',
                          '654a', '6558', '6644' ]
            if token_type in skip_type:
                print(token_hex)
            else:
                parse_atom_stream(bytes.fromhex(token_data[4:]))
        if token_type == '7045':
            print("pE Sign Off Token Found          :", bytes.fromhex(token_type))
            print("X"*40)
    else:
        print("Token Data Empty.")
        print("X"*40)

def find_end_byte():
    print("Searching for END Byte....")
    if end_byte == "0d":
        print("END Byte Found                      :", end_byte)
    else:
        print("Malformed Packet, END Byte NOT Found.")
    print("X"*40)

def parse_atom_stream(raw_atom_stream):
    atom_stream = fs.AtomStream()
    atom_stream.parse(raw_atom_stream)

def main():
    # TODO Switches to analyze, play and edit packet
    print_script_header()
    print_entire_packet()
    print_packet_header()
    validate_sync_packet()
    find_crc_hilo_byte()
    #breakpoint()
    # TODO Calculate CRC values and validate
    find_length_byte()
    get_seq_info()
    show_packet_type()
    show_token_data()
    decode_token_data()
    # TODO Decode FDO stream
    find_end_byte()

main()