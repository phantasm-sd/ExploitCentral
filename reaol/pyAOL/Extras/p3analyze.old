#!/usr/bin/python
# It's a mess
# I like comments
# Unless they come from your mom
# - phantasm
import sys
import re

# Input packet from argv
packet = " ".join(sys.argv[1:])
packet_int = int(packet, 16)
# Split this shit up into pairs
packetBV = re.findall('.{1,2}', packet)
packetbytearray = bytearray(packet, encoding="utf-8")
print("\npacketbytearray:")
print(packetbytearray)
packetbytes = bytes(packetbytearray)
print("\npacketbytes:")
print(packetbytes)
hexpacket = hex(packet_int)
print("\nhexpacket:")
print(packet_int)
print(hexpacket)
hexpacketbytes = bytes(packet)
print("\nhexpacketbytes:")
print(hexpacketbytes)

#print("Packet in Hex: "(hexpacket))
####################################
# Identify each byte of the packet
# Z
zbit = packetBV[0]
####################################
# CRC HI and LO
crclo = hexpacketbytes[2]
crchi = hexpacketbytes[:3] 
####################################
# Always Null 4th byte
nullbyte = packetBV[3]
####################################
# Length Byte
length = packetBV[4]
####################################
# HB/SEQ Bytes
txseq = packetBV[5]
rxseq = packetBV[6]
####################################
# NOT a space as documented
# a0 if TX
# 20 if RX
token_type = packetBV[7]
####################################
# Dd, AT, SC, CJ, cQ, CA, CB, Aa, AB, AC, ETC
raw_token = packetBV[8:10]
token = ''.join(raw_token)
token_bytes = bytes.fromhex(token)
token_ascii = token_bytes.decode("ASCII")
####################################
# Token data from 11th byte to -1
token_data = packetBV[10:-1]
####################################
# Last byte should be 0d
end_p3 = packetBV[-1:]
####################################
# Calculate packet size to compare with 5th byte
length_check = len(packetBV[5:-1])
hex_length_check = hex(length_check)

####################################
# Do we see a Z ?
print(hexpacketbytes[0])
print(hexpacketbytes[1])
print(hexpacketbytes[2])

if hexpacketbytes[:1] == b'Z':
    print("####################################")
    print("         Do we see the Z ?          ")
    print("####################################")
    print("zbit found                     :  {}".format(zbit))
else:
    print("####################################")
    print("zbit not found. Try something else.")
    exit()

####################################
# Print CRC bytes
# Need to add CRC check
print("####################################")
print("          CRC Bytes                 ")
print("####################################")
print("CRC LO                         :  {}".format(crclo))
print("CRC HI                         :  {}".format(crchi))
####################################
# Print NULL + packet length bytes
print("####################################")
print("       Packet Length Bytes          ")
print("####################################")
print("NULL byte                      :  {}".format(nullbyte))
print("packet len                     :  {}".format(length))
####################################
# Print packet length verification
print("####################################")
print("# Verifying Packet Length for bit 5#")
print("####################################")
print("Length is                      :  {}".format(length_check))
print("Hex Length                     :{}".format(hex_length_check))
#####################################
# Print TX and RX sequence bytes
print("####################################")
print("      TX and RX Sequence Bytes      ")
print("####################################")
print("TX Sequence                    :  {}".format(txseq))
print("RX Sequence                    :  {}".format(rxseq))
#####################################
# Print Token Type
# Need more to be able to detect/reference
print("####################################")
print("         Token Type Byte            ")
print("####################################")
print("Token Type                     :  {}".format(token_type))
if packetBV[7] == 'a3':
    print("Token Type: INIT")
elif packetBV[7] == '24':
    print("Token Type: ACK")
elif packetBV[7] == 'a0':
    print("Token Type: TXDATA")
elif packetBV[7] == '20':
    print("Token Type: RXDATA")
else:
    print("New Token Type Found: {}".format(token_type))
######################################
# Print Token and related data
print("####################################")
print("            Token                   ")
print("####################################")
print("Token Hex                      :{}".format(token))
print("Token ASCII                    :  {}".format(token_ascii))
#tokenBV = re.findall('.{1,2}', token_data.decode())
#print("TokenBV                        : {}".format(tokenBV))
print("Token Data                     :")
print(''.join(token_data))
######################################
# Check for END of Frame byte 0d
if ''.join(packetBV[-1:]) == '0d':
    print("END                            :  {}".format(''.join(end_p3)))
else:
    print("END Not Found. Last bit should be 0d")
